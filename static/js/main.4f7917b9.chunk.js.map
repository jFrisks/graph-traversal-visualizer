{"version":3,"sources":["logo.svg","data/countries.js","components/GraphView/Graph.js","components/GraphView/Graphs.js","components/Datastructures.js","components/Algorithms.js","components/GraphView/GraphView.jsx","components/SnackbarLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","eu","world","africa","restCountriesURL","nameCodeBorders","fetchAPI","region","a","fetch","response","json","myJSON","countries","getEUCountries","getWorldCountries","getAfricaCountries","Graph","ref","width","height","Matter","use","MatterAttractors","Engine","Render","World","Composite","Bodies","Constraint","Body","Mouse","MouseConstraint","defaultColor","selectColor","startColor","finishColor","visitedColor","inQueueColor","pathColor","defaultNodeRadius","defaultEdgeLength","stiffness","damping","nodes","Map","engine","create","render","element","current","options","wireframes","hasZIndex","graph","hoveredNode","label","Node","id","nodeBody","neighbours","details","this","prevColor","currentColor","oldDetails","color","fillStyle","strokeStyle","setCurrentColor","nodeID","push","addNode","radius","node","get","setDetails","pos","x","Math","random","y","lineWidth","zIndex","plugin","attractors","Attractors","gravity","circle","add","set","addEdge","nodeIDA","nodeIDB","length","nodeA","nodeB","name","undefined","constrainOptions","bodyA","bodyB","optionsObj","constraint","type","anchors","createConstraint","getBody","addNeighbour","changeColor","valToModify","console","error","prevSelectedID","prevNode","setToOldColor","newData","addDataToGraph","startNodeID","endNodeID","log","clear","setStart","setFinish","setUp","gravityConstant","isStatic","walls","rectangle","shapeWidth","setUpBorders","mouse","canvas","mouseConstraint","visible","Events","on","event","foundNodeBody","Query","point","allBodies","position","CustomEvent","detail","dispatchEvent","onNodeHover","addNodeHoverEvent","addMouseConstrain","run","reset","values","resetColors","getNode","addMultipleEdges","multipleNodeID","forEach","selectNode","selectedNode","startNode","finishNode","setPath","pathArr","setNewGraphData","setVisited","visited","setVisitedColor","setInQueueColor","setStaticNode","setNodeRadius","setEdgeLength","calcSetNodeEdgeSize","dataLength","boxHeight","dataSize","ratio","ceil","found","heightInBoxes","calcBoxSize","nodeLength","edgeLength","getAllNodeID","keys","Graphs","bodyRef","euCountries","createGraph","addCountriesToGraph","worldcountries","data","newGraph","country","alpha3Code","borders","EUGraph","WorldGraph","Queue","items","item","isEmpty","shift","Stack","pop","timer","ms","Promise","res","setTimeout","Algorithms","timerWait","backtrack","path","predNode","q","visitedNodes","selectedNodeID","enqueue","currentNodeID","dequeue","getNeighbours","neighbourID","has","S","bfs","dfs","Wrapper","styled","div","Menu","Button","button","RedButton","Selector2","props","value","onChange","typeName","FormControl","InputLabel","htmlFor","Select","inputProps","map","option","index","MenuItem","key","speedSteps","GraphView","setHoverMessage","hoverMessage","setState","setHoverOpen","hoverOpen","processHoverMessageQueue","state","hoverQueue","sendHoverMessage","message","Date","getTime","handleHoverClose","reason","handleHoverExited","graphNodes","algoRunning","endNode","speed","scene","React","createRef","handleSelectChange","bind","handleNodeHover","then","allNodeID","addEventListener","stateVar","target","runAlgo","addCountriesToDataFunc","prev","algo","className","onClick","handleBFTClick","handleBFSClick","handleDFSClick","handleReset","Paper","e","handleGraphChange","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","onExited","ContentProps","Component","SnackbarLayout","queueRef","useRef","useState","setOpen","messageInfo","setMessageInfo","processQueue","children","App","window","innerHeight","innerWidth","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f7917b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//World countries and their bordering countries - https://restcountries.eu/rest/v2/all?fields=name;alpha2Code;borders;\n//EU countries - https://restcountries.eu/rest/v2/regionalbloc/eu?fields=name;alpha2Code;borders;\nconst eu =  \"region/europe\"\nconst world = \"all\"\nconst africa = \"region/africa\"\n\nconst restCountriesURL = \"https://restcountries.eu/rest/v2/\"\nconst nameCodeBorders = \"?fields=name;alpha3Code;borders;\"\n\nasync function fetchAPI(region) {\n    const response = await fetch(restCountriesURL + region + nameCodeBorders);\n    const myJSON = await response.json();\n    return myJSON;\n}\n\nfunction countries() {\n    const getEUCountries = async () => {\n        return await fetchAPI(eu)\n    }\n\n    const getWorldCountries = async () => {\n        return await fetchAPI(world)\n    }\n\n    const getAfricaCountries = async () => {\n        return await fetchAPI(africa)\n    }\n\n    return {\n        getEUCountries,\n        getWorldCountries,\n        getAfricaCountries\n    }\n}\nexport default countries;","import Matter from 'matter-js/build/matter'\nimport MatterAttractors from 'matter-attractors'\n\nfunction Graph(ref, width, height) {\n    Matter.use(MatterAttractors);\n\n    let Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Composite = Matter.Composite,\n        Bodies = Matter.Bodies,\n        Body = Matter.Body,\n        Constraint = Matter.Constraint,\n        Mouse = Matter.Mouse,\n        MouseConstraint = Matter.MouseConstraint;\n\n    let defaultColor = 'blue',\n        selectColor = 'orange',\n        startColor = 'white',\n        finishColor = 'yellow',\n        visitedColor = 'red',\n        inQueueColor = 'white',\n        pathColor = 'green';\n\n    let defaultNodeRadius = 10,\n        defaultEdgeLength = 50,\n        stiffness = 0.005,\n        damping = 0.1;\n\n    var nodes = new Map()\n    let engine = setUpEngine()\n    let render = setUpRender()\n    let graph = Composite.create()\n    let hoveredNode = {label: \"undefied\"}\n\n    function setUpEngine() {\n        return Engine.create()\n    }\n\n    function setUpRender() {\n        return Render.create({\n            element: ref.current,\n            engine: engine,\n            options: {\n                width: width,\n                height: height,\n                wireframes: false,\n                hasZIndex: false,\n            }\n        })\n    }\n\n    function setUpBorders() {\n        //Create node body\n        let shapeWidth = 500\n        let options = {\n            render: {\n                fillStyle: defaultColor,\n                strokeStyle: defaultColor,\n                lineWidth: 3\n            },\n            isStatic: true\n        }\n        const wallLeft = Bodies.rectangle(-shapeWidth/2, height/2, shapeWidth, height, options);\n        const wallTop = Bodies.rectangle(width/2, -shapeWidth/2, width, shapeWidth, options);\n        const wallRight = Bodies.rectangle(width+shapeWidth/2, height/2, shapeWidth, height, options);\n        const wallBottom = Bodies.rectangle(width/2, height+shapeWidth/2, width, shapeWidth, options);\n        const walls = [wallLeft, wallTop, wallRight, wallBottom]\n        //Add to world engine\n        World.add(engine.world, walls);\n        World.add(engine.world, graph)\n    }\n\n    function setUp() {\n        /** \n         *  gravity of -5.5 - stable fast, but very powerful beginning movements if starting at same pos. Removed powerful with random startpos\n         *  gravity of -3.5 might be a bit stiff, but still not to wiggly\n         *  gravity of -2.5 Feels a bit to wiggly. Wiggles a long time\n        */\n        engine.world.gravity.y = 0;\n        MatterAttractors.Attractors.gravityConstant = -7.5;\n        stiffness = 0.005\n        damping = 0.1\n\n        setUpBorders();\n        addMouseConstrain();\n    }\n\n    class Node {\n        constructor(id, nodeBody, neighbours, details = {}){\n            this.id = id;\n            this.details = details;\n            this.nodeBody = nodeBody;\n            this.neighbours = neighbours;\n            this.prevColor = defaultColor;\n            this.currentColor = defaultColor;\n        }\n\n        setDetails(details){\n            let oldDetails = this.details;\n            this.details = {...oldDetails, ...details}\n        }\n\n        setCurrentColor(color) {\n            this.nodeBody.render.fillStyle = color\n            this.nodeBody.render.strokeStyle = color\n\n            this.prevColor = this.currentColor\n            this.currentColor = color\n        }\n\n        setToOldColor(){\n            this.nodeBody.render.fillStyle = this.prevColor\n            this.nodeBody.render.strokeStyle = this.prevColor\n\n            let currentColor = this.currentColor;\n            this.currentColor = this.prevColor\n            this.prevColor = currentColor;\n        }\n\n        resetColors(){\n            this.currentColor = defaultColor;\n            this.setCurrentColor(defaultColor)\n        }\n\n        addNeighbour(nodeID) {\n            this.neighbours.push(nodeID)\n        }\n\n        getNeighbours() {\n            return this.neighbours;\n        }\n\n        getBody() {\n            return this.nodeBody;\n        }\n\n    }\n\n    function addNode(id, radius = defaultNodeRadius, details = {}) {\n        //error handling - if already created\n        let node = nodes.get(id);\n        if(node) {\n            //add Node information\n            node.setDetails(details)\n            return\n        }\n            \n\n        //Create node body\n        let margin = 0.1\n        let pos = {\n            x: (Math.random() * (1-margin*2) + margin) * width,\n            y: (Math.random() * (1-margin*2) + margin) * height\n        }\n        let options = {\n            label: id,\n            render: {\n                fillStyle: defaultColor,\n                strokeStyle: defaultColor,\n                lineWidth: 3,\n                zIndex: 500,\n            },\n            plugin: {\n                attractors: [\n                    MatterAttractors.Attractors.gravity\n                ]\n            }\n        }\n        //creating nodeBody\n        let nodeBody = Bodies.circle(pos.x, pos.y, radius, options);\n        //Add to world engine\n        Composite.add(graph, nodeBody);\n        //add empty neighbours\n        let neighbours = []\n\n        node = new Node(id, nodeBody, neighbours, details)\n        nodes.set(id, node)\n    }\n\n    function addEdge(nodeIDA, nodeIDB, length = defaultEdgeLength) {\n        let nodeA = nodes.get(nodeIDA)\n        let nodeB = nodes.get(nodeIDB)\n\n        //error case\n        if(!nodeA || !nodeB) {\n            let details = {\n                name: \"Outside region\"\n            }\n            if(!nodeA) {\n                details.name = nodeIDA + \" - \" +  details.name\n                addNode(nodeIDA, undefined, details)\n                nodeA = nodes.get(nodeIDA)\n            }\n            if(!nodeB) {\n                details.name = nodeIDB + \" - \" + details.name\n                addNode(nodeIDB, undefined, details)\n                nodeB = nodes.get(nodeIDB)\n            }\n        }\n        //Add constraint and put in world\n        let constrainOptions = {\n            length: length,\n            damping: damping,\n            stiffness: stiffness\n        }\n        //Put edge object in array for body and neighbours, added to graph composite\n        createConstraint(nodeA.getBody(), nodeB.getBody(), constrainOptions)\n\n        //setting neighbours for nodes\n        nodeA.addNeighbour(nodeIDB)\n        nodeB.addNeighbour(nodeIDA)\n    }\n\n    function addMultipleEdges(nodeIDA, multipleNodeID, length = defaultEdgeLength) {\n        multipleNodeID.forEach(nodeIDB => {\n            addEdge(nodeIDA, nodeIDB, length)\n        })\n    }\n\n    function reset() {\n        for(let node of nodes.values()){\n            node.resetColors()\n        }\n    }\n\n    function setVisited(nodeID, visited) {\n        visited.set(nodeID, true)\n    }\n\n  \n    function selectNode(nodeID, selectedNode) {\n        changeColor(nodeID, selectedNode, selectColor)\n    }\n\n    function setStart(nodeID, startNode) {\n        changeColor(nodeID, startNode, startColor)\n    }\n\n    function setFinish(nodeID, finishNode) {\n        changeColor(nodeID, finishNode, finishColor)\n    }\n\n    function setNodeRadius(radius){\n        defaultNodeRadius = radius;\n    }\n\n    function setEdgeLength(length){\n        defaultEdgeLength = length;\n    }\n\n    function setPath(pathArr){\n        pathArr.forEach(nodeID => {\n            let node = nodes.get(nodeID)\n            node.setCurrentColor(pathColor)\n        })\n    }\n\n    function changeColor(nodeID, valToModify, color) {\n        const node = nodes.get(nodeID)\n        if(!node)\n            return console.error(\"Couldn't change Color - No nodeID found\")\n\n        //set selected variable to node and get the prev\n        const prevSelectedID = valToModify;\n        valToModify = nodeID;\n\n        //change color on newly selected node.\n        node.setCurrentColor(color)\n\n        //Change back color of prev selected node\n        const prevNode = nodes.get(prevSelectedID)\n        if(!prevNode)\n            return console.error(\"Couldn't change Color - No nodeID found\")\n        prevNode.setToOldColor()\n    }\n\n    function setInQueueColor(nodeID) {\n        const node = nodes.get(nodeID)\n        if(!node)\n            return console.error(\"Couldn't set in queue Color - No nodeID found\")\n        node.setCurrentColor(inQueueColor)\n    }\n\n    function setVisitedColor(node) {\n        node.setCurrentColor(visitedColor)\n    }\n\n    function calcSetNodeEdgeSize(dataLength){\n        let boxHeight = calcBoxSize(dataLength)\n        let edgeToNodeSize = 4;\n        let nodeLength = Math.ceil(boxHeight / (edgeToNodeSize + 1))\n        let edgeLength = Math.ceil(nodeLength * edgeToNodeSize)\n        console.log(\"Nodelength: \", nodeLength)\n        console.log(\"edgeLength: \", edgeLength)\n\n        console.log(\"Calculated node size\")\n        this.setNodeRadius(nodeLength / 2)\n        this.setEdgeLength(edgeLength)\n        console.log(\"set sizes for datalength \", dataLength)\n    }\n\n    function calcBoxSize(dataSize) {\n        var ratio = Math.ceil(width / height)\n        var found = false\n        var heightInBoxes = 1\n        while(!found){\n            // width * height\n            let boxes = (heightInBoxes * ratio) * heightInBoxes\n            if(boxes >= dataSize)\n                found = true\n            heightInBoxes += 1\n\n        }\n        return Math.ceil(height / heightInBoxes);\n    }\n\n    async function setNewGraphData(newData, addDataToGraph, startNodeID, endNodeID){\n        console.log(\"clearing all nodes\")\n        //Clear old stuff - could be added to history in future\n        Composite.clear(graph, false)\n        nodes.clear()\n\n        //add new stuff\n        await addDataToGraph(newData, this)\n        this.setStart(startNodeID)\n        this.setFinish(endNodeID)\n    }\n\n    function getAllNodeID(){\n        return [...nodes.keys()]\n    }\n\n    function createConstraint(bodyA, bodyB, options) {\n        //TODO - looks so theres no already exisitng\n        let optionsObj = {bodyA, bodyB, ...options}\n        let constraint = Constraint.create(optionsObj)\n        constraint.render.type = 'line';\n        constraint.render.anchors = false;\n        Composite.add(graph, constraint);\n        return constraint\n    }\n\n    function getNode(nodeID) {\n        let node = nodes.get(nodeID)\n        if(!node)\n            return console.error(\"Could not find node\")\n        return node\n    }\n\n    function run() {\n        // run the engine\n        Engine.run(engine);\n        Render.run(render);  \n    }\n\n    function addMouseConstrain() {\n        // add mouse control\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                visible: false\n                }\n            }\n            });\n        World.add(engine.world, mouseConstraint);\n\n        addNodeHoverEvent(mouseConstraint)\n    }\n\n    function addNodeHoverEvent(mouseConstraint){\n        //Add event with 'mousemove'\n        Matter.Events.on(mouseConstraint, 'mousemove', (event) => {\n            //For Matter.Query.point pass \"array of bodies\" and \"mouse position\"\n            var foundPhysics = Matter.Query.point(Composite.allBodies(graph), event.mouse.position);\n        \n            //Your custom code here\n            let foundNodeBody = foundPhysics[0];\n            if(typeof foundNodeBody !== \"undefined\"){\n                if(foundNodeBody.label !== hoveredNode){\n                    //TODO - add this.props.handle\n                    let nodeID = foundNodeBody.label\n                    onNodeHover(nodeID)\n                }\n                hoveredNode = foundNodeBody.label;\n            }\n        });\n    }\n\n    function onNodeHover(nodeID){\n        //console.log(\"onNodeHover for node: \", node)\n        let node = nodes.get(nodeID)\n        if(!node)\n            return\n        var event = new CustomEvent('onNodeHover', {\n            detail: {node}\n        });\n        ref.current.dispatchEvent(event);\n    }\n\n    function setStaticNode(nodeID) {\n        const node = nodes.get(nodeID)\n        if (!node)\n            return console.log(\"couldnät set static node - no node found with id:\", nodeID)\n        node.getBody().isStatic = true;\n    }\n\n    return {\n        setUp,\n        run,\n        reset,\n        addNode,\n        getNode,\n        addEdge,\n        addMultipleEdges,\n        selectNode,\n        setStart,\n        setFinish,\n        setPath,\n        setNewGraphData,\n        setVisited,\n        setVisitedColor,\n        setInQueueColor,\n        setStaticNode,\n        setNodeRadius,\n        setEdgeLength,\n        calcSetNodeEdgeSize,\n        getAllNodeID,\n    }\n}\n\nexport default Graph;","import countries from '../../data/countries'\nimport Graph from './Graph'\n\nfunction Graphs(bodyRef, width, height) {\n\n    async function EUGraph(startNodeID, endNodeID){\n        const euCountries = await countries().getEUCountries()\n        const graph = await createGraph(euCountries, addCountriesToGraph, startNodeID, endNodeID)\n        return graph\n    }\n\n    async function WorldGraph(startNodeID, endNodeID){\n        const worldcountries = await countries().getWorldCountries()\n        const graph = await createGraph(worldcountries, addCountriesToGraph, startNodeID, endNodeID)\n        return graph\n    }\n\n    async function createGraph(data, addDataToGraph, startNodeID, endNodeID){\n        let newGraph = new Graph(bodyRef, width, height)\n        newGraph.setUp()\n        await addDataToGraph(data, newGraph)\n        newGraph.run()\n\n        newGraph.setStart(startNodeID)\n        newGraph.setFinish(endNodeID)\n        return newGraph;\n    }\n\n    async function addCountriesToGraph(countries, Graph){\n        console.log(\"Adding countries to graph \", Graph)\n        Graph.calcSetNodeEdgeSize(countries.length)\n        await countries.forEach(country => {\n            const nodeIDA = country.alpha3Code\n            const multipleNodeID = country.borders\n            const details = {\n                name: country.name\n            }\n            Graph.addNode(nodeIDA, undefined, details)\n            Graph.addMultipleEdges(nodeIDA, multipleNodeID)\n        })\n    }\n\n    return {\n        EUGraph,\n        WorldGraph,\n        addCountriesToGraph,\n    }\n}\n\nexport default Graphs;","class Queue \n{ \n    // Array is used to implement a Queue \n    constructor() \n    { \n        this.items = []; \n    } \n                  \n    enqueue(item) {\n        this.items.push(item)\n    }\n    dequeue() {\n        if(this.isEmpty())\n            return \"Trying to dequeue empty queue\"\n        return this.items.shift()\n    }\n    peek() {\n        if(this.isEmpty())\n            return \"Trying to peek empty queue\"\n        return this.items[0];\n    }\n    isEmpty() {\n        return this.items.length === 0;\n    }\n    // printQueue() \n} \n\nclass Stack \n{ \n    // Array is used to implement a Queue \n    constructor() \n    { \n        this.items = []; \n    } \n                  \n    push(item) {\n        this.items.push(item)\n    }\n    pop() {\n        if(this.isEmpty())\n            return \"Trying to dequeue empty queue\"\n        return this.items.pop()\n    }\n    peek() {\n        if(this.isEmpty())\n            return \"Trying to peek empty queue\"\n        return this.items[this.items.length - 1];\n    }\n    isEmpty() {\n        return this.items.length === 0;\n    }\n    // printQueue() \n} \n\nexport {\n    Queue,\n    Stack\n}","import { Queue, Stack } from './Datastructures'\n\nfunction Algorithms(Graph, timerWait) {\n    //All algo stuff in here, so we can have the graph to only manipulate the visual, and then reset in end\n    // let visitedNodes = new Map()\n    // let selectedNode = undefined;\n    // let startNode = undefined;\n    // let finishNode = undefined;\n\n    async function bfs(startNodeID, endNodeID = undefined) {\n    //set up\n        var q = new Queue()\n        var visitedNodes = new Map()\n        var predNode = new Map()\n        var selectedNodeID = undefined;\n        let startNode = startNodeID\n\n        //add startNode to visited\n        Graph.setVisited(startNodeID, visitedNodes)\n        q.enqueue(startNodeID)\n\n        Graph.setStart(startNodeID, startNode)\n    \n    //run algo\n        while(!q.isEmpty()) {\n            let currentNodeID = q.dequeue();\n\n            //If using endnode\n            if(currentNodeID === endNodeID){\n                let path = backtrack();\n                Graph.setPath(path);\n                return path\n            }\n\n            const node = Graph.getNode(currentNodeID)\n            //TODO - set visitedColor\n            Graph.setVisitedColor(node)\n            Graph.selectNode(currentNodeID, selectedNodeID)\n            selectedNodeID = currentNodeID;\n            \n            //Iterate through all neigbours and potentially add to queue\n            for(let neighbourID of node.getNeighbours()){\n                if(!visitedNodes.has(neighbourID)){\n                    Graph.setVisited(neighbourID, visitedNodes)\n                    //add to queue\n                    q.enqueue(neighbourID)\n                    //adding predesseor for backtracking\n                    predNode.set(neighbourID, currentNodeID)\n                    //TODO - Set color to inQueueColor\n                    Graph.setInQueueColor(neighbourID)\n                }\n            }\n            //Timer for slowing down\n            await timer(timerWait)\n        }\n        return console.log('BFS done')\n\n        function backtrack(){\n            var path = []\n            var current = endNodeID\n\n            //Loopa\n            while(current !== undefined){\n                path.push(current)\n                //if successfully found startNode\n                if(current === startNodeID){\n                    console.log(\"Backtracked: \", path)\n                    return path\n                }\n                //going to pred\n                current = predNode.get(current)\n            }\n            //returneras ifall inget hittas\n            return console.error(\"Backtrack error\")\n        }\n    }\n\n    async function dfs(startNodeID) {\n        //S be stack\n        var S = new Stack()\n        var visitedNodes = new Map()\n        var selectedNodeID = undefined;\n        let startNode = startNodeID\n\n        S.push(startNodeID)\n        Graph.setVisited(startNodeID, visitedNodes)\n\n        Graph.setStart(startNodeID, startNode)\n\n        while(!S.isEmpty()){\n            let currentNodeID = S.pop()\n            const node = Graph.getNode(currentNodeID)\n\n            Graph.setVisitedColor(node)\n            Graph.selectNode(currentNodeID, selectedNodeID)\n            selectedNodeID = currentNodeID;\n\n            for(let neighbourID of node.getNeighbours()){\n                if(!visitedNodes.has(neighbourID)){\n                    Graph.setVisited(neighbourID, visitedNodes)\n                    S.push(neighbourID)\n                    Graph.setInQueueColor(neighbourID)\n                }\n            }\n            await timer(timerWait)\n        }\n    }\n\n    return {\n        bfs,\n        dfs\n    }\n}\n\nfunction timer(ms) {\n    return new Promise(res => setTimeout(res, ms))\n}\n\nexport default Algorithms;","import React from 'react'\nimport styled from 'styled-components'\n\nimport Graphs from './Graphs'\nimport Algorithms from '../Algorithms'\nimport countries from '../../data/countries'\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Paper, Snackbar } from '@material-ui/core';\n\nconst Wrapper = styled.div`\n    position: relative;\n`\nconst Menu = styled.div`\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 7%;\n    margin-left: auto;\n    margin-right: auto;\n\n    display: flex;\n    flex-wrap: wrap;\n    width: 93vw;\n    justify-content: center;\n`\n\nconst Button = styled.button`\n    background-color:#44c767;\n\t-moz-border-radius:28px;\n\t-webkit-border-radius:28px;\n\tborder-radius:28px;\n\tborder:1px solid #18ab29;\n\tdisplay:inline-block;\n\tcursor:pointer;\n\tcolor:#ffffff;\n\tfont-family:Arial;\n\tfont-size:17px;\n\tpadding:16px 31px;\n\ttext-decoration:none;\n\ttext-shadow:0px 1px 0px #2f6627;\n`\n\nconst RedButton = styled(Button)`\n    background-color:#EA3C3C;\n    text-shadow:0px 1px 0px rgba(35,35,35,0.72);\n    border:1px solid rgba(35,35,35,0.72);\n`\n\nfunction Selector2(props) {\n    const { data, value, onChange, typeName, ...other } = props;\n\n    return(\n        <FormControl>\n            <InputLabel htmlFor=\"age-simple\">{typeName}</InputLabel>\n            <Select\n                value={value}\n                onChange={onChange}\n                inputProps={{\n                name: typeName,\n                id: typeName,\n                }}\n            >\n                {data.map((option, index) => (\n                    <MenuItem key={option+index} value={option}>{option}</MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n\nlet speedSteps = [50, 100, 500, 1000, 2000]\n\nclass GraphView extends React.Component{\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            Graph: undefined,\n            graphNodes: [],\n            algoRunning: false,\n            startNode: \"Choose\",\n            endNode: \"Choose\",\n            speed: speedSteps[3],\n            selectedNode: undefined,\n            hoverQueue: [],\n            hoverOpen: false,\n            hoverMessage: undefined,\n        }\n        this.scene = React.createRef();\n        this.handleSelectChange = this.handleSelectChange.bind(this);\n        this.handleNodeHover = this.handleNodeHover.bind(this);\n    }\n\n    componentDidMount() {\n        //set upp render - after that set up everything else\n        Graphs(this.scene, this.props.width, this.props.height).WorldGraph()\n            .then(newGraph => {\n                let allNodeID = newGraph.getAllNodeID()\n                this.setState({\n                    Graph: newGraph,\n                    graphNodes: allNodeID,\n                    startNode: allNodeID[0],\n                    endNode: allNodeID[0]\n                })\n            })\n        this.scene.current.addEventListener('onNodeHover', this.handleNodeHover);\n    }\n  \n    setHoverMessage = (hoverMessage) => {\n        this.setState({hoverMessage})\n    }\n\n    setHoverOpen = (hoverOpen) => {\n        this.setState({hoverOpen})\n    }\n    \n    processHoverMessageQueue = () => {\n      if (this.state.hoverQueue.length > 0) {\n        this.setHoverMessage(this.state.hoverQueue.shift());\n        this.setHoverOpen(true);\n      }\n    };\n  \n    sendHoverMessage = message => {\n        this.state.hoverQueue.push({\n            message,\n            key: new Date().getTime(),\n        });\n    \n        if (this.state.hoverOpen) {\n            // immediately begin dismissing current message\n            // to start showing new one\n            this.setHoverOpen(false);\n        } else {\n            this.processHoverMessageQueue();\n        }\n    };\n  \n    handleHoverClose = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n      this.setHoverOpen(false);\n    };\n  \n    handleHoverExited = () => {\n      this.processHoverMessageQueue();\n    };\n\n\n    handleSelectChange(event, stateVar) {\n        //TODO -Set new nodecolors\n        // this.state.Graph.setStart()\n        // this.state.Graph.setFinish()\n\n        this.setState({[stateVar]: event.target.value})\n    }\n\n    handleNodeHover(event) {\n        //Get node id\n        let node = event.detail.node\n        this.sendHoverMessage(node.details.name)\n        this.setState({selectedNode: node})\n    }\n\n    handleBFTClick() {\n        const algo = () => Algorithms(this.state.Graph, this.state.speed).bfs(this.state.startNode)\n        this.runAlgo(algo)\n    }\n\n    handleBFSClick() {\n        const algo = () => Algorithms(this.state.Graph, this.state.speed).bfs(this.state.startNode, this.state.endNode)\n        this.runAlgo(algo)\n    }\n\n    handleDFSClick() {\n        const algo = () => Algorithms(this.state.Graph, this.state.speed).dfs(this.state.startNode)\n        this.runAlgo(algo)\n    }\n\n    async handleGraphChange(region) {\n        if(this.state.algoRunning)\n            return this.sendHoverMessage('You can only change graph when algo is not running')\n        let data;\n        switch(region){\n            case 'eu':\n                data = await countries().getEUCountries()\n                break;\n            case 'world':\n                data = await countries().getWorldCountries()\n                break;\n            case 'africa':\n                data = await countries().getAfricaCountries()\n                break;\n            default:\n                data = await countries().getWorldCountries()\n        }\n        let addCountriesToDataFunc = Graphs(this.scene, this.props.width, this.props.height).addCountriesToGraph\n        this.state.Graph.setNewGraphData(data, addCountriesToDataFunc, this.state.startNode, this.state.endNode)\n        let allNodeID = this.state.Graph.getAllNodeID()\n        this.setState(prev => ({\n            graphNodes: allNodeID,\n            startNode: prev.startNode,\n            endNode: prev.endNode\n        }))\n    }\n\n    handleReset() {\n        const resetFunc = () => new Promise(res => {\n            console.log(\"resetting colors\")\n            this.state.Graph.reset()\n            res()\n        })\n        this.runAlgo(resetFunc)\n    }\n\n    async runAlgo(algo) {\n        if(this.state.algoRunning)\n            return this.sendHoverMessage('SLOW DOWN - Algo already running')\n\n        this.setState({algoRunning: true})\n        await algo()\n        this.setState({algoRunning: false})\n    }\n\n    \n    render() {\n        return (\n            <Wrapper>\n                <div className=\"graphView\" ref={this.scene}>\n                    <Menu>\n                        <Button onClick={() => this.handleBFTClick()}>\n                            START BFT\n                        </Button>\n                        <Button onClick={() => this.handleBFSClick()}>\n                            START BFS\n                        </Button>\n                        <Button onClick={() => this.handleDFSClick()}>\n                            START DFT\n                        </Button>\n                        <RedButton onClick={() => this.handleReset()}>\n                            Reset\n                        </RedButton>\n                        <Paper>\n                            <Selector2 data={this.state.graphNodes} typeName=\"Start Node\" value={this.state.startNode} onChange={(e) => this.handleSelectChange(e, 'startNode')}/>\n                            <Selector2 data={this.state.graphNodes} typeName=\"End Node\" value={this.state.endNode} onChange={(e) => this.handleSelectChange(e, 'endNode')}/>\n                            <Selector2 data={speedSteps} typeName=\"Algo Speed\" value={this.state.speed} onChange={(e) => this.handleSelectChange(e, 'speed')}/>\n                        </Paper>\n                        \n                        <Button onClick={() => this.handleGraphChange('eu')}>\n                            EU Graph\n                        </Button>\n                        <Button onClick={() => this.handleGraphChange('world')}>\n                            World Graph\n                        </Button>\n                        <Button onClick={() => this.handleGraphChange('africa')}>\n                            Africa Graph\n                        </Button>\n                    </Menu>\n                    <Snackbar\n                        key={this.state.hoverMessage ? this.state.hoverMessage.key : undefined}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left',\n                        }}\n                        open={this.state.hoverOpen}\n                        autoHideDuration={2000}\n                        onClose={this.handleHoverClose}\n                        onExited={this.handleHoverExited}\n                        ContentProps={{\n                            'aria-describedby': 'message-id',\n                        }}\n                        message={<span id=\"message-id\">{this.state.hoverMessage ? this.state.hoverMessage.message : undefined}</span>}\n                    />\n                </div>\n            </Wrapper>\n        )\n    }\n}\n\n\nexport default GraphView;","import React from 'react'\nimport { Button, Snackbar } from '@material-ui/core';\n\n\nexport default function SnackbarLayout(props) {\n    const queueRef = React.useRef([]);\n    const [open, setOpen] = React.useState(false);\n    const [messageInfo, setMessageInfo] = React.useState(undefined);\n  \n    const processQueue = () => {\n      if (queueRef.current.length > 0) {\n        setMessageInfo(queueRef.current.shift());\n        setOpen(true);\n      }\n    };\n  \n    const handleClick = message => () => {\n      queueRef.current.push({\n        message,\n        key: new Date().getTime(),\n      });\n  \n      if (open) {\n        // immediately begin dismissing current message\n        // to start showing new one\n        setOpen(false);\n      } else {\n        processQueue();\n      }\n    };\n  \n    const handleClose = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n      setOpen(false);\n    };\n  \n    const handleExited = () => {\n      processQueue();\n    };\n\n    return (\n      <>\n        {props.children}\n        <Snackbar\n          key={messageInfo ? messageInfo.key : undefined}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={open}\n          autoHideDuration={2000}\n          onClose={handleClose}\n          onExited={handleExited}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{messageInfo ? messageInfo.message : undefined}</span>}\n        />\n      </>\n    );\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport GraphView from './components/GraphView/GraphView'\nimport SnackbarLayout from './components/SnackbarLayout'\n\nfunction App() {\n  return ( \n    <SnackbarLayout>\n      <GraphView height={window.innerHeight} width={window.innerWidth}/>\n    </SnackbarLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}